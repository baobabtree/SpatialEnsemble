require(raster)
ref = raster("../../Experiment/Chanhassen/ref.img")
q()
require(raster)#
#
ref = raster("../../Experiment/Chanhassen/ref.img")
q()
features = stack("data/BigStone/features.tif")
require(raster)
features = stack("data/BigStone/features.tif")
features = stack("BigStone/features.tif")
features
ref=raster("BigStone/ref.tif")
ref
for (i in 1:4){#
  interval=values(features[[i]])#
  interval=interval %/% 8#
  features[[i]]=interval#
}#
textures = features;#
# because R stores matrix by column, so the co-occurence matrix here is vertical#
window.edge = 5#
window.size = window.edge^2#
normal_factor = 2*window.edge*(window.edge-1) # total number of co-occurrence pairs#
for (i in 1:4){#
  time_start=Sys.time()#
  focaled = focal(features[[i]], w=matrix(1, window.edge, window.edge),fun=function(x,na.rm=TRUE){#
    co_matrix = matrix(0,32,32)#
    for (i in 1:window.size){#
      if (i %% window.edge != 0){#
        if(!is.na(x[i]) && !is.na(x[i+1])){#
          co_matrix[x[i],x[i+1]] <- co_matrix[x[i],x[i+1]]+1#
          co_matrix[x[i+1],x[i]] <- co_matrix[x[i+1],x[i]]+1#
        }#
      }#
    }#
    HOM = 0#
    for (i in 1:32)#
      for(j in 1:32){#
        HOM <- HOM + co_matrix[i,j]/(1+abs(i-j))#
      }#
    return(HOM)#
  },#
  na.rm=TRUE, pad=TRUE)#
  time_end = Sys.time()#
  print(time_end-time_start)#
 textures[[i]] = focaled;#
 #writeRaster(focaled1,filename=paste(getwd(),"focal1.studyArea.tif",sep="/"),format="GTiff",overwrite=TRUE)#
#  writeRaster(focaled,filename=paste("focal",i,".StudyArea.5x5.tif",sep=""),format="GTiff",overwrite=TRUE)#
}
features[[1]]
textures[[1]]
plot( textures[[1]])
<<<<<<< HEAD
data=read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/input.texture.txt",sep=",")
require(raster)
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt", sep=",");#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	for(cid in footprints[footprints[,1]==fid,2]){#
		footprint.map[cls[cls[,2]==cid,1] + 1] = fid;#
	}#
}#
dev.new();plot(footprint.map, col=c("red","green"))
ref = raster("~/Research/CodeRepository/SpatialDecompose/data/BigStone/ref.tif")
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt", sep=",");#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	for(cid in footprints[footprints[,1]==fid,2]){#
		footprint.map[cls[cls[,2]==cid,1] + 1] = fid;#
	}#
}#
dev.new();plot(footprint.map, col=c("red","green"))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
q()
require(raster)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("~/Research/CodeRepository/SpatialDecompose/data/BigStone/ref.tif")
data=read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/input.texture.txt",sep=",")
summary(data)
cls = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")
require(rpart)
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")
dt.map = ref; #
dt.map[1:ncell(ref)] = as.numeric(dt.pred);
table(values(ref),dt.pred)
dt.map = ref; #
dt.map[1:ncell(ref)] = as.numeric(dt.pred)-1;#
dt.map[dt.map==0&ref==1] = 2;#
dt.map[dt.map==1&ref==0] = 3;#
dev.new();plot(dt.map)
dev.new();plot(dt.map, col=c("red","green","black","blue"))
train.map = ref; train.map[data[,9]>0] = NA; dev.new(); plot(train.map)
train.map = ref; train.map[data[,9]>0] = NA; dev.new(); plot(train.map, col=c("red","green"))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}
table(ref[footprints==1])
table(ref[footprints[,1]==1])
table(ref[footprints[,1]==2])
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
train.map = ref; train.map[data[,9]>0] = NA; dev.new(); plot(train.map, col=c("red","green"))
table(data[footprints[,1]==2,9])
table(data[footprints[footprints[,1]==2,2],9])
dev.new();plot(dt.map, col=c("red","green","black","blue"))
cls = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
table(data[footprints[footprints[,1]==2,2],9])
table(data[footprints[footprints[,1]==1,2],9])
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
table(data[footprints[footprints[,1]==1,2],9])
table(data[footprints[footprints[,1]==1,2],9])
table(data[footprints[footprints[,1]==2,2],9])
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2],];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	res = res + res.i;#
}
class(dt.pred.i)
help(table)
table(0,0)
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2],];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
=======
getwd()
require(raster)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("BigStone/ref.tif")#
features = stack("~/Research/CodeRepository/SpatialDecompose/data/BigStone/features.tif")
data=read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/input.texture.txt",sep=",")
data=read.table("BigStone/input.texture.txt",sep=",")
cls = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
q()
>>>>>>> refs/remotes/zhejiangustc/master
q()
