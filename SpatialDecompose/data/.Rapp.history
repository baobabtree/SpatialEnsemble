table(data[footprints[footprints[,1]==2,2],9])
dev.new();plot(dt.map, col=c("red","green","black","blue"))
cls = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
table(data[footprints[footprints[,1]==2,2],9])
table(data[footprints[footprints[,1]==1,2],9])
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
table(data[footprints[footprints[,1]==1,2],9])
table(data[footprints[footprints[,1]==2,2],9])
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2],];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	res = res + res.i;#
}
class(dt.pred.i)
help(table)
table(0,0)
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2],];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
=======
getwd()
require(raster)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("BigStone/ref.tif")#
features = stack("~/Research/CodeRepository/SpatialDecompose/data/BigStone/features.tif")
data=read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/input.texture.txt",sep=",")
data=read.table("BigStone/input.texture.txt",sep=",")
cls = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
q()
>>>>>>> refs/remotes/zhejiangustc/master
q()
require(raster)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("BigStone/ref.tif")#
features = stack("BigStone/features.tif")
data=read.table("BigStone/input.texture.txt",sep=",")
cls = read.table("BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
footprints = read.table("data/BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
require(rpart)
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
require(rpart)#
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")#
dt.map = ref; #
dt.map[1:ncell(ref)] = as.numeric(dt.pred)-1;#
dt.map[dt.map==0&ref==1] = 2;#
dt.map[dt.map==1&ref==0] = 3;#
dev.new();plot(dt.map, col=c("red","green","black","blue"))
table(values(dt.map))
table(data[data[,9]>0,9])
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("BigStone/ref.tif")#
features = stack("BigStone/features.tif")#
#
nc = ref@ncols#
loc = 1:ncell(ref)#
loc.r = (loc-1)%/%nc+1#
loc.c = (loc-1)%%nc + 1#
#
input = data.frame(values(features[[1]]), values(features[[2]]), values(features[[3]]), values(features[[4]]), values(ref), loc.r, loc.c)#
#sample 1: Clustered Sampling#
trainWetRep=sample(loc.raster[ref==1],N)#
trainDryRep=sample(loc.raster[ref==0],N)#
trainRep = c(trainWetRep, trainDryRep)#
#
#sample 2: systematic clustered sampling#
num.per.cell = 2;#
all.cell.number=1:(ref@ncols*ref@nrows)#
grid.size=100#
grid.nrows=ceiling(ref@nrows/grid.size)#
grid.ncols=ceiling(ref@ncols/grid.size)#
i.vec=rep(1:ref@nrows,each=ref@ncols)#
j.vec=rep(1:ref@ncols,times=ref@nrows)#
i.grid.vec=ceiling(i.vec/grid.size)#
j.grid.vec=ceiling(j.vec/grid.size)#
grid.number=(i.grid.vec-1)*grid.ncols+j.grid.vec#
trainRep = NULL;#
for(g in 1:(grid.nrows*grid.ncols)){#
	#randomly select several samples#
	trainRep.g = sample(all.cell.number[grid.number==g], 2)#
	trainRep = c(trainRep, trainRep.g);#
	#grid.majority.class[g]=modal(ref[which(grid.number==g)])#
}#
#
#clustered sample#
train=ref;#
train[1:ncell(train)]=NA#
N = 30#
loc.raster = ref#
loc.raster[1:ncell(ref)]=loc#
train[c(trainRep)]=1#
radius=21#
train=buffer(train,width=radius) #note here the width is meters, b/3=no.of.cell#
dev.new(); plot(train)
data=read.table("BigStone/input.texture.txt",sep=",")#
data[,9] = values(ref) + 1;#
data[is.na(values(train)),9] = 0;
table(data[data[,9]>0,9])
write.table(data,"BigStone/input.texture.txt",sep=",", row.n=F, col.n=F)
cls = read.table("BigStone/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.1600.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.1600.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.1000.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.800.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.600.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.600.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.600.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.400.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.600.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.800.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.1000.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.800.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
footprints = read.table("~/Research/CodeRepository/SpatialDecompose/data/BigStone/footprints.txt", sep=",");#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	for(cid in footprints[footprints[,1]==fid,2]){#
		footprint.map[cls[cls[,2]==cid,1] + 1] = fid;#
	}#
}#
dev.new();plot(footprint.map, col=c("red","green"))
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
data[ref[footprints[footprints[,1]==1,2]]]
table[ref[footprints[footprints[,1]==1,2]]]
table([)ref[footprints[footprints[,1]==1,2]])
table(ref[footprints[footprints[,1]==1,2]])
table(data[footprints[footprints[,1]==1,2]])
table(data[footprints[footprints[,1]==1,2],9])
table(data[footprints[footprints[,1]==2,2],9])
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")#
table(values(ref),dt.pred)
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
footprints = read.table("BigStone/footprints.txt", sep=",");#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	for(cid in footprints[footprints[,1]==fid,2]){#
		footprint.map[cls[cls[,2]==cid,1] + 1] = fid;#
	}#
}#
dev.new();plot(footprint.map, col=c("red","green"))
cls = read.table("BigStone/cluster.800.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
footprints = read.table("BigStone/footprints.txt", sep=",");#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	for(cid in footprints[footprints[,1]==fid,2]){#
		footprint.map[cls[cls[,2]==cid,1] + 1] = fid;#
	}#
}#
dev.new();plot(footprint.map, col=c("red","green"))
for(i in 1:2){#
	data.i = data[values(footprint.map)==i,1:9];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[values(footprint.map)==i]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
train.map = ref; train.map[data[,9]>0] = NA; dev.new(); plot(train.map, col=c("red","green"))
dev.new();plot(dt.map, col=c("red","green","black","blue"))
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
cls = read.table("BigStone/cluster.800.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("BigStone/ref.tif")#
features = stack("BigStone/features.tif")#
#
nc = ref@ncols#
loc = 1:ncell(ref)#
loc.r = (loc-1)%/%nc+1#
loc.c = (loc-1)%%nc + 1#
#
input = data.frame(values(features[[1]]), values(features[[2]]), values(features[[3]]), values(features[[4]]), values(ref), loc.r, loc.c)#
#sample 1: Clustered Sampling#
trainWetRep=sample(loc.raster[ref==1],N)#
trainDryRep=sample(loc.raster[ref==0],N)#
trainRep = c(trainWetRep, trainDryRep)#
#
#sample 2: systematic clustered sampling#
num.per.cell = 1;#
all.cell.number=1:(ref@ncols*ref@nrows)#
grid.size=50#
grid.nrows=ceiling(ref@nrows/grid.size)#
grid.ncols=ceiling(ref@ncols/grid.size)#
i.vec=rep(1:ref@nrows,each=ref@ncols)#
j.vec=rep(1:ref@ncols,times=ref@nrows)#
i.grid.vec=ceiling(i.vec/grid.size)#
j.grid.vec=ceiling(j.vec/grid.size)#
grid.number=(i.grid.vec-1)*grid.ncols+j.grid.vec#
trainRep = NULL;#
for(g in 1:(grid.nrows*grid.ncols)){#
	#randomly select several samples#
	trainRep.g = sample(all.cell.number[grid.number==g], 2)#
	trainRep = c(trainRep, trainRep.g);#
	#grid.majority.class[g]=modal(ref[which(grid.number==g)])#
}#
#
#clustered sample#
train=ref;#
train[1:ncell(train)]=NA#
N = 30#
loc.raster = ref#
loc.raster[1:ncell(ref)]=loc#
train[c(trainRep)]=1#
radius=21#
train=buffer(train,width=radius) #note here the width is meters, b/3=no.of.cell#
dev.new(); plot(train)
data=read.table("BigStone/input.texture.txt",sep=",")#
data[,9] = values(ref) + 1;#
data[is.na(values(train)),9] = 0;
write.table(data,"BigStone/input.texture.txt",sep=",", row.n=F, col.n=F)
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")#
table(values(ref),dt.pred)
dt.map = ref; #
dt.map[1:ncell(ref)] = as.numeric(dt.pred)-1;#
dt.map[dt.map==0&ref==1] = 2;#
dt.map[dt.map==1&ref==0] = 3;#
dev.new();plot(dt.map, col=c("red","green","black","blue"))
cls = read.table("BigStone/cluster.1000.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("BigStone/cluster.800.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	#res = res + res.i;#
}
res.i
as.matrix(res.i)
class(as.matrix(res.i))
res+(as.matrix(res.i))
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	res = res + as.matrix(res.i);#
}
print(res)
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")#
table(values(ref),dt.pred)
#read footprints from BisectSpatialEnsemble fid-pid#
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	dt.i = rpart(V9~., data=train.i, method="class");#
	dt.pred.i = predict(dt.i, newdata = data.i, type="class")#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class")	#
	}#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
	}#
	res.i = table(ref.i, dt.pred.i);#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
as.numeric(table(ref.i))
dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));
res.i
table(ref.i)
unique(train.i[,9])
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("BigStone/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("SwanLake/ref.tif")#
features = stack("SwanLake/features.tif")#
#
nc = ref@ncols#
loc = 1:ncell(ref)#
loc.r = (loc-1)%/%nc+1#
loc.c = (loc-1)%%nc + 1
plot(ref)
rm(list=ls())
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("SwanLake/ref.tif")#
features = stack("SwanLake/features.tif")#
#
nc = ref@ncols#
loc = 1:ncell(ref)#
loc.r = (loc-1)%/%nc+1#
loc.c = (loc-1)%%nc + 1
plot(ref)
ref
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("SwanLake/ref.tif")#
features = stack("SwanLake/features.tif")#
#
nc = ref@ncols#
loc = 1:ncell(ref)#
loc.r = (loc-1)%/%nc+1#
loc.c = (loc-1)%%nc + 1#
#
input = data.frame(values(features[[1]]), values(features[[2]]), values(features[[3]]), values(features[[4]]), values(ref), loc.r, loc.c)#
#sample 1: Clustered Sampling#
# N = 30#
# trainWetRep=sample(loc.raster[ref==1],N)#
# trainDryRep=sample(loc.raster[ref==0],N)#
# trainRep = c(trainWetRep, trainDryRep)#
#
#sample 2: systematic clustered sampling#
num.per.cell = 1;#
all.cell.number=1:(ref@ncols*ref@nrows)#
grid.size=100#
N = 1#
grid.nrows=ceiling(ref@nrows/grid.size)#
grid.ncols=ceiling(ref@ncols/grid.size)#
i.vec=rep(1:ref@nrows,each=ref@ncols)#
j.vec=rep(1:ref@ncols,times=ref@nrows)#
i.grid.vec=ceiling(i.vec/grid.size)#
j.grid.vec=ceiling(j.vec/grid.size)#
grid.number=(i.grid.vec-1)*grid.ncols+j.grid.vec#
trainRep = NULL;#
for(g in 1:(grid.nrows*grid.ncols)){#
	#randomly select several samples#
	trainRep.g = sample(all.cell.number[grid.number==g], N)#
	trainRep = c(trainRep, trainRep.g);#
	#grid.majority.class[g]=modal(ref[which(grid.number==g)])#
}#
#
#clustered sample#
train=ref;#
train[1:ncell(train)]=NA#
loc.raster = ref#
loc.raster[1:ncell(ref)]=loc#
train[c(trainRep)]=1#
radius=21#
train=buffer(train,width=radius) #note here the width is meters, b/3=no.of.cell#
dev.new(); plot(train)
input[,5] = input[,5] +1;#
input[is.na(values(train)), 5] = 0#
write.table(input, "SwanLake/input.txt",sep=",", row.n=F, col.n=F)
ref
data=read.table("BigStone/input.texture.txt",sep=",")
data=read.table("SwanLake/input.texture.txt",sep=",")
summary(data)
require(rpart)#
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")#
table(values(ref),dt.pred)
dt.map = ref; #
dt.map[1:ncell(ref)] = as.numeric(dt.pred)-1;#
dt.map[dt.map==0&ref==1] = 2;#
dt.map[dt.map==1&ref==0] = 3;#
dev.new();plot(dt.map, col=c("red","green","black","blue"))
1/9
cls = read.table("BigStone/cluster.2000.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("SwanLake/cluster.2000.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
cls = read.table("SwanLake/cluster.2000.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
footprints = read.table("SwanLake/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
cls = read.table("SwanLake/cluster.2000.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
footprints = read.table("SwanLake/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("SwanLake/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("Chanhassen/ref.tif")#
features = stack("Chanhassen/features.tif")
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("Chanhassen/ref.img")#
features = stack("Chanhassen/features.img")
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("Chanhassen/ref.img")#
features = stack("Chanhassen/spectral.img")
ref
data=read.table("Chanhassen/input.texture.txt",sep=",")
data=read.table("Chanhassen/input.texture.txt",sep=",")
summary(data)
train.map = ref; train.map[data[,9]>0] = NA; #
dev.new(); plot(train.map, col=c("red","green"))
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("Chanhassen/ref.img")#
features = stack("Chanhassen/spectral.img")#
#
nc = ref@ncols#
loc = 1:ncell(ref)#
loc.r = (loc-1)%/%nc+1#
loc.c = (loc-1)%%nc + 1#
#
input = data.frame(values(features[[1]]), values(features[[2]]), values(features[[3]]), values(features[[4]]), values(ref), loc.r, loc.c)#
#sample 1: Clustered Sampling#
# N = 30#
# trainWetRep=sample(loc.raster[ref==1],N)#
# trainDryRep=sample(loc.raster[ref==0],N)#
# trainRep = c(trainWetRep, trainDryRep)#
#
#sample 2: systematic clustered sampling#
num.per.cell = 1;#
all.cell.number=1:(ref@ncols*ref@nrows)#
grid.size=50#
N = 1#
grid.nrows=ceiling(ref@nrows/grid.size)#
grid.ncols=ceiling(ref@ncols/grid.size)#
i.vec=rep(1:ref@nrows,each=ref@ncols)#
j.vec=rep(1:ref@ncols,times=ref@nrows)#
i.grid.vec=ceiling(i.vec/grid.size)#
j.grid.vec=ceiling(j.vec/grid.size)#
grid.number=(i.grid.vec-1)*grid.ncols+j.grid.vec#
trainRep = NULL;#
for(g in 1:(grid.nrows*grid.ncols)){#
	#randomly select several samples#
	trainRep.g = sample(all.cell.number[grid.number==g], N)#
	trainRep = c(trainRep, trainRep.g);#
	#grid.majority.class[g]=modal(ref[which(grid.number==g)])#
}#
#
#clustered sample#
train=ref;#
train[1:ncell(train)]=NA#
loc.raster = ref#
loc.raster[1:ncell(ref)]=loc#
train[c(trainRep)]=1#
radius=21#
train=buffer(train,width=radius) #note here the width is meters, b/3=no.of.cell#
#plot training set locations#
train.map = ref; train.map[data[,9]>0] = NA; #
dev.new(); plot(train.map, col=c("red","green"))
dev.new(); plot(train, col=c("red","green"))
data=read.table("Chanhassen/input.texture.txt",sep=",")#
data[,9] = values(ref) + 1;#
data[is.na(values(train)),9] = 0;
write.table(data,"Chanhassen/input.texture.txt",sep=",", row.n=F, col.n=F)
summary(data)
cls = read.table("Chanhassen/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
require(rpart)#
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")#
table(values(ref),dt.pred)#
dt.map = ref; #
dt.map[1:ncell(ref)] = as.numeric(dt.pred)-1;#
dt.map[dt.map==0&ref==1] = 2;#
dt.map[dt.map==1&ref==0] = 3;#
dev.new();plot(dt.map, col=c("red","green","black","blue"))
footprints = read.table("Chanhassen/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
ls()
plot(c.map)
writeRaster(c.map,"Chanhassen/cls.img",format="HFA")
c.map=ref;
c.map[cls[,1]]=cls[,2];
writeRaster(c.map,"Chanhassen/cls.tif",format="GTiff")
train.map = ref; train.map[data[,9]>0] = NA; #
dev.new(); plot(train.map, col=c("red","green"))
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("Chanhassen/ref.img")#
features = stack("Chanhassen/spectral.img")#
#
nc = ref@ncols#
loc = 1:ncell(ref)#
loc.r = (loc-1)%/%nc+1#
loc.c = (loc-1)%%nc + 1#
#
input = data.frame(values(features[[1]]), values(features[[2]]), values(features[[3]]), values(features[[4]]), values(ref), loc.r, loc.c)#
#sample 1: Clustered Sampling#
# N = 30#
# trainWetRep=sample(loc.raster[ref==1],N)#
# trainDryRep=sample(loc.raster[ref==0],N)#
# trainRep = c(trainWetRep, trainDryRep)#
#
#sample 2: systematic clustered sampling#
num.per.cell = 1;#
all.cell.number=1:(ref@ncols*ref@nrows)#
grid.size=50#
N = 2#
grid.nrows=ceiling(ref@nrows/grid.size)#
grid.ncols=ceiling(ref@ncols/grid.size)#
i.vec=rep(1:ref@nrows,each=ref@ncols)#
j.vec=rep(1:ref@ncols,times=ref@nrows)#
i.grid.vec=ceiling(i.vec/grid.size)#
j.grid.vec=ceiling(j.vec/grid.size)#
grid.number=(i.grid.vec-1)*grid.ncols+j.grid.vec#
trainRep = NULL;#
for(g in 1:(grid.nrows*grid.ncols)){#
	#randomly select several samples#
	trainRep.g = sample(all.cell.number[grid.number==g], N)#
	trainRep = c(trainRep, trainRep.g);#
	#grid.majority.class[g]=modal(ref[which(grid.number==g)])#
}#
#
#clustered sample#
train=ref;#
train[1:ncell(train)]=NA#
loc.raster = ref#
loc.raster[1:ncell(ref)]=loc#
train[c(trainRep)]=1#
radius=21#
train=buffer(train,width=radius) #note here the width is meters, b/3=no.of.cell#
dev.new(); plot(train, col=c("red","green"))
data=read.table("Chanhassen/input.texture.txt",sep=",")#
data[,9] = values(ref) + 1;#
data[is.na(values(train)),9] = 0;
write.table(data,"Chanhassen/input.texture.txt",sep=",", row.n=F, col.n=F)
train.map = ref; train.map[data[,9]>0] = NA; #
dev.new(); plot(train.map, col=c("red","green"))
cls = read.table("Chanhassen/cluster.txt",sep=",")#
cluster.ids=unique(cls[,2])#
dict=array(0,max(cluster.ids)+1)#
dict[cluster.ids+1]=sample(length(cluster.ids))#
c.map=ref;#
c.map[cls[,1]]=dict[cls[,2]+1]#
#
jet.colors <-#
  colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",#
                     "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))#
dev.new();plot(c.map,col=jet.colors(length(cluster.ids)))
require(rpart)#
dt = rpart(V9~., data=data[data[,9]>0,1:9],method="class");#
dt.pred = predict(dt, newdata = data[,1:9],type="class")#
table(values(ref),dt.pred)#
dt.map = ref; #
dt.map[1:ncell(ref)] = as.numeric(dt.pred)-1;#
dt.map[dt.map==0&ref==1] = 2;#
dt.map[dt.map==1&ref==0] = 3;#
dev.new();plot(dt.map, col=c("red","green","black","blue"))
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.2.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.3.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.4.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.5.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.6.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.7.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.8.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.9.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
footprints = read.table("Chanhassen/footprints.10.txt",sep=",")#
footprint.map = ref;#
footprint.map[1:ncell(ref)]=NA#
for(fid in unique(footprints[,1])){#
	footprint.map[footprints[footprints[,1]==fid,2]+1] = fid;#
}#
dev.new();plot(footprint.map, col=jet.colors(length(unique(footprints[,1]))))#
#
#get per footprint prediction accuracy#
#footprint1#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	train.i = data.i[data.i[,9]>0,1:9]#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = data.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
#
	print(res.i)#
	res = res + as.matrix(res.i);#
}#
print(res)
require(raster)#
require(rpart)#
set.seed(ceiling(sqrt(4301901)))#
ref = raster("Chanhassen/ref.img")#
features = stack("Chanhassen/spectral.img")#
#
data=read.table("Chanhassen/input.texture.txt",sep=",")#
truth = values(ref);
summary(data)
summary(truth)
train.dat = data[data[,9]>0,1:9]#
test.dat = cbind(data[data[,9]==0,1:8], truth[data[,9]==0]+1);
summary(train.dat)
summary(test.dat)
footprints = read.table("Chanhassen/footprints.3.txt",sep=",")#
res = matrix(0, nr=2,nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	train.i = data.i[data.i[,9]>0,1:9]#
	test.i = cbind(data.i[,1:8], ref.i)#
}
ref = raster("Chanhassen/ref.tif")#
features = stack("Chanhassen/features.tif")
ref
as.character(21)
as.character(11)
as.character(5)
m = 3; #num of footprints#
footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
footprints = read.table(footprint.file, sep=",")#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	train.i = data.i[data.i[,9]>0,1:9]#
	test.i = cbind(data.i[data.i[,9]==0,1:8], ref.i[data.i[,9]==0])#
}
global.dir = "Chanhassen/";#
ref.file = paste(global.dir,"ref.tif",sep="");#
feature.file = paste(global.dir,"features.tif",sep="");#
sample.file = paste(global.dir,"input.texture.txt",sep="");
m = 3; #num of footprints#
footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
footprints = read.table(footprint.file, sep=",")#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	train.i = data.i[data.i[,9]>0,1:9]#
	test.i = cbind(data.i[data.i[,9]==0,1:8], ref.i[data.i[,9]==0])#
}
table(train.dat[,9])
table(test.dat[,9])
table(train.dat[,9])+table(test.dat[,9])
#test sensitivity of number of zones m, DT base model#
m = 3; #num of footprints#
footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
footprints = read.table(footprint.file, sep=",")#
res = matrix(0, nr=2, nc=2);#
for(i in unique(footprints[,1])){#
	data.i = data[footprints[footprints[,1]==i,2]+1,];#
	ref.i = ref[footprints[footprints[,1]==i,2]+1]#
	train.i = data.i[data.i[,9]>0,1:9]#
	test.i = cbind(data.i[,1:8], ref.i)#
	if(length(unique(train.i[,9]))==1){#
		dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
		res.i = matrix(0,nr=2,nc=2);#
		res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
	}#
	else{#
		dt.i = rpart(V9~., data=train.i, method="class");#
		dt.pred.i = predict(dt.i, newdata = test.i, type="class");	#
		res.i = table(ref.i, dt.pred.i);#
	}#
	res = res + as.matrix(res.i);#
}#
print(res)
install.packages("adabag")
require(adabag)
m.range = 3; #num of footprints#
model="dt"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, dt.pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
#test sensitivity of number of zones m, DT base model#
m.range = 3; #num of footprints#
model="dt"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
m.range = 3:4; #num of footprints#
model="dt"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
m.range = 3; #num of footprints#
model="bagging"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
m.range = 3; #num of footprints#
model="rf"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
require(randomForest)
m.range = 3; #num of footprints#
model="rf"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
help(regression)
m.range = 3; #num of footprints#
model="rf"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			train.i[,9] = as.factor(train.i[,9])#
			test.i[,9] = as.factor(test.i[,9])#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
m.range = 3:4; #num of footprints#
model="rf"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			train.i[,9] = as.factor(train.i[,9])#
			test.i[,9] = as.factor(test.i[,9])#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
m.range = 3; #num of footprints#
model="boosting"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			train.i[,9] = as.factor(train.i[,9])#
			test.i[,9] = as.factor(test.i[,9])#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
dim(train.i)
dim(test.i)
summary(train.i)
boost.i = boosting(V9~., data = train.i, method="class");
boost.i
pred.i = predict(boost.i, newdata = test.i, type = "class");
length(pred.i)
class(pred.i)
class(pred.i$class)
length(pred.i$class)
pred.i = pred.i$class;
res.i = table(ref.i, pred.i);
res.i
bag.i = bagging(V9~., data = train.i, method = "class")
pred.i = predict(bag.i, newdata = test.i, type="class")
length(pred.i$class)
class(pred.i$class)
pred.i = pred.i$class;
res.i = table(ref.i, pred.i);
res.i
m.range = 3:4; #num of footprints#
model="boosting"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			train.i[,9] = as.factor(train.i[,9])#
			test.i[,9] = as.factor(test.i[,9])#
			pred.i = NULL;#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
				pred.i = pred.i$class;#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
				pred.i = pred.i$class;#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
m.range = 3:4; #num of footprints#
model="bagging"#
for(m in m.range){#
	footprint.file = paste(global.dir, "footprints.", as.character(m), ".txt", sep="");#
	footprints = read.table(footprint.file, sep=",")#
	res = matrix(0, nr=2, nc=2);#
	for(i in unique(footprints[,1])){#
		data.i = data[footprints[footprints[,1]==i,2]+1,];#
		ref.i = ref[footprints[footprints[,1]==i,2]+1]#
		train.i = data.i[data.i[,9]>0,1:9]#
		test.i = cbind(data.i[,1:8], ref.i)#
		if(length(unique(train.i[,9]))==1){#
			dt.pred.i = rep(unique(train.i[,9]), length=nrow(data.i)) ;#
			res.i = matrix(0,nr=2,nc=2);#
			res.i[,unique(train.i[,9])] = as.numeric(table(ref.i));#
		}#
		else{#
			train.i[,9] = as.factor(train.i[,9])#
			test.i[,9] = as.factor(test.i[,9])#
			pred.i = NULL;#
			#decision tree#
			if(model == "dt"){#
				dt.i = rpart(V9~., data=train.i, method="class");#
				pred.i = predict(dt.i, newdata = test.i, type="class");		#
			}#
			else if(model == "rf"){#
				rf.i = randomForest(V9~., data = train.i, method ="class");#
				pred.i = predict(rf.i, newdata = test.i, type = "class");#
			}#
			else if(model == "bagging"){#
				bag.i = bagging(V9~., data = train.i, method = "class")#
				pred.i = predict(bag.i, newdata = test.i, type="class")#
				pred.i = pred.i$class;#
			}#
			else if(model == "boosting"){#
				boost.i = boosting(V9~., data = train.i, method="class");#
				pred.i = predict(boost.i, newdata = test.i, type = "class");#
				pred.i = pred.i$class;#
			}#
			else {#
				#Error!#
			}#
			res.i = table(ref.i, pred.i);#
		}#
		res = res + as.matrix(res.i);#
	}#
	print(res)#
}
#we prepare data, let Weka runs it#
train.dat = data[data[,9]>0,1:9]#
test.dat = cbind(data[data[,9]==0,1:8], truth[data[,9]==0]+1);#
train.dat[,9] = as.factor(train.dat[,9])#
test.dat[,9] = as.factor(test.dat[,9])#
dt.fit = rpart(V9~., data=train.dat, method="class");#
dt.pred = predict(dt.fit, newdata = test.dat, type="class");#
dt.cm = as.matrix(table(test.dat[,9], dt.pred))#
rf.fit = randomForest(V9~., data = train.dat, method ="class");#
rf.pred = predict(rf.fit, newdata = test.dat, type = "class");#
rf.cm = as.matrix(table(test.dat[,9], rf.pred))#
bag.fit = bagging(V9~., data = train.dat, method = "class")#
bag.pred = predict(bag.fit, newdata = test.dat, type="class")#
bag.pred = bag.pred$class;#
bag.cm = as.matrix(table(test.dat[,9], bag.pred))#
boost.fit = boosting(V9~., data = train.dat, method="class");#
boost.pred = predict(boost.fit, newdata = test.dat, type = "class");#
boost.pred = boost.pred$class;#
boost.cm = as.matrix(table(test.dat[,9], boost.pred))
dt.cm
rf.cm
boost.cm
bag.cm
'
;
''
'
q()
